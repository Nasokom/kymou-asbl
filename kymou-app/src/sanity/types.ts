/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: never;
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Content = Array<{
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
} | {
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h4";
  listItem?: never;
  markDefs?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Contact = {
  _id: string;
  _type: "contact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  text?: Content;
  seo?: Seo;
  contact?: {
    title?: string;
    email?: string;
  };
  catch?: string;
  asbl?: {
    name?: string;
    bic?: string;
    iban?: string;
  };
};

export type CustomMedia = {
  _id: string;
  _type: "customMedia";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  asset?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altText?: string;
  caption?: string;
  tags?: Array<string>;
  copyright?: string;
};

export type HomePage2 = {
  _id: string;
  _type: "homePage2";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  header?: {
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    quote?: {
      text?: Content;
      credit?: string;
    };
  };
  about?: {
    title?: string;
    text?: Content;
  };
  goal?: {
    title?: string;
    text?: Content;
    axes?: Array<{
      title?: string;
      text?: Content;
      _type: "axe";
      _key: string;
    }>;
  };
  footer?: {
    title?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
  seo?: Seo;
};

export type BlogContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h2" | "h3";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    credit?: string;
    _type: "quote";
    _key: string;
  } | {
    float?: "left" | "right";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "inlineicon";
    _key: string;
  } | {
    href?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "projectv2";
    };
    _type: "projectLink";
    _key: string;
  } | {
    href?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "blogPost";
    };
    _type: "articleLink";
    _key: string;
  } | {
    href?: string;
    _type: "externalLink";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  isFullScreen?: boolean;
  _type: "image";
  _key: string;
}>;

export type BlogPost = {
  _id: string;
  _type: "blogPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  date?: string;
  hero?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  content?: BlogContent;
  author?: {
    name?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
  isPublished?: boolean;
  seo?: Seo;
};

export type Projectv2 = {
  _id: string;
  _type: "projectv2";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  title?: string;
  isPublished?: boolean;
  slug?: Slug;
  hero?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  pitch?: TextImg;
  problem?: TextImg;
  action?: TextImg;
  result?: TextImg;
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  seo?: Seo;
};

export type TextImg = {
  _type: "textImg";
  text?: Content;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  allowStudio?: Array<{
    name?: string;
    ip?: string;
    allow?: boolean;
    _key: string;
  }>;
};

export type BlogPage = {
  _id: string;
  _type: "blogPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  description?: string;
  seo?: Seo;
};

export type ProjectPage = {
  _id: string;
  _type: "projectPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  description?: string;
  seo?: Seo;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Seo = {
  _type: "seo";
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  noIndex?: boolean;
  tags?: Array<string>;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | BlockContent | Content | Contact | CustomMedia | HomePage2 | BlogContent | BlogPost | Projectv2 | TextImg | Settings | BlogPage | ProjectPage | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Seo | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: HOME_QUERY
// Query: *[_type == "homePage2"][0]{  ...,  header{    ...,      image{...,asset->}  },  footer{    ...,    image{      asset->    }  }}
export type HOME_QUERYResult = {
  _id: string;
  _type: "homePage2";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  header: {
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    quote?: {
      text?: Content;
      credit?: string;
    };
  } | null;
  about?: {
    title?: string;
    text?: Content;
  };
  goal?: {
    title?: string;
    text?: Content;
    axes?: Array<{
      title?: string;
      text?: Content;
      _type: "axe";
      _key: string;
    }>;
  };
  footer: {
    title?: string;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
  } | null;
  seo?: Seo;
} | null;
// Variable: BLOG_PAGE_QUERY
// Query: *[_type == "blogPage"][0]
export type BLOG_PAGE_QUERYResult = {
  _id: string;
  _type: "blogPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  description?: string;
  seo?: Seo;
} | null;
// Variable: POSTS_QUERY
// Query: *[_type == "blogPost" && defined(slug.current) && isPublished == true && now() > date ][0...12]{  _id, title, author, slug,  content, _createdAt,publishedAt,description,  hero{    ...,    asset-> {      title,      url,      credit,      ...    }  },}
export type POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  author: {
    name?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
  slug: Slug | null;
  content: BlogContent | null;
  _createdAt: string;
  publishedAt: null;
  description: string | null;
  hero: {
    asset: {
      title?: string;
      url?: string;
      credit: null;
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;
// Variable: BLOG_SITEMAP_QUERY
// Query: *[_type == "blogPost" && now() > date && isPublished == true ]{_id,slug,_createdAt,_updatedAt}
export type BLOG_SITEMAP_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  _createdAt: string;
  _updatedAt: string;
}>;
// Variable: BLOG_LENGTH_QUERY
// Query: *[_type == "blogPost" && now()  > date && isPublished == true ]{}
export type BLOG_LENGTH_QUERYResult = Array<{}>;
// Variable: POST_QUERY
// Query: *[_type == "blogPost" && slug.current == $slug][0]{  _id,  'slug':slug.current,  title,  author,  content,   publishedAt,  _createdAt,  _updatedAt,  description,  'rawContent':pt::text(content),  seo,  hero{    ...,    asset->{      ...    }  },}
export type POST_QUERYResult = {
  _id: string;
  slug: string | null;
  title: string | null;
  author: {
    name?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
  content: BlogContent | null;
  publishedAt: null;
  _createdAt: string;
  _updatedAt: string;
  description: string | null;
  rawContent: string;
  seo: Seo | null;
  hero: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
} | null;
// Variable: CONTACT_QUERY
// Query: *[_type == "contact"][0]
export type CONTACT_QUERYResult = {
  _id: string;
  _type: "contact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  text?: Content;
  seo?: Seo;
  contact?: {
    title?: string;
    email?: string;
  };
  catch?: string;
  asbl?: {
    name?: string;
    bic?: string;
    iban?: string;
  };
} | null;
// Variable: POSTS_SLUGS_QUERY
// Query: *[_type == "blogPost" && defined(slug.current)]{   "slug": slug.current}
export type POSTS_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: GALLERY_QUERY
// Query: *[ _type == 'sanity.imageAsset' && opt.media.tags != null]{  originalFilename,  url,  title,  description,       'lqip':metadata.lqip,    'dimensions':metadata.dimensions,  altText,  _rev,   "reference" : *[    references(^._id)    &&     _type == 'projectv2'  ][0]{slug, title}   }
export type GALLERY_QUERYResult = Array<never>;
// Variable: PROJECT_PAGE_QUERY
// Query: *[_type == "projectPage"][0]
export type PROJECT_PAGE_QUERYResult = {
  _id: string;
  _type: "projectPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  description?: string;
  seo?: Seo;
} | null;
// Variable: PROJECTS_QUERY
// Query: *[_type == "projectv2" && isPublished == true]|order(orderRank)        {        title,        _id,        slug,        hero{          ...,          asset->        }}
export type PROJECTS_QUERYResult = Array<{
  title: string | null;
  _id: string;
  slug: Slug | null;
  hero: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;
// Variable: PROJECTS_SITEMAP_QUERY
// Query: *[_type == "projectv2" && isPublished == true]        {        title,        _id,        slug        ,_createdAt,_updatedAt                   }
export type PROJECTS_SITEMAP_QUERYResult = Array<{
  title: string | null;
  _id: string;
  slug: Slug | null;
  _createdAt: string;
  _updatedAt: string;
}>;
// Variable: PROJECT_QUERY
// Query: *[_type == "projectv2" && slug.current == $slug][0]                    {title,                    _id,                    seo,                    _createdAt,                    _updatedAt,                    seo,                     hero{                      ...,                      asset->{                        ...                      }                    },                    'rawIntro':pt::text(pitch.text),                    'rawContent':pt::text(pitch.text+problem.text+action.text+result.text),                    slug,                    pitch{text,"image":image.asset->},                    problem{text,"image":image.asset->},                    action{text,"image":image.asset->},                    result{text,"image":image.asset->},                  'gallery':gallery[].asset->{  originalFilename,  url,  title,  description,       'lqip':metadata.lqip,    'dimensions':metadata.dimensions,  altText,  _rev,}}
export type PROJECT_QUERYResult = {
  title: string | null;
  _id: string;
  seo: Seo | null;
  _createdAt: string;
  _updatedAt: string;
  hero: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  rawIntro: string;
  rawContent: string;
  slug: Slug | null;
  pitch: {
    text: Content | null;
    image: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  problem: {
    text: Content | null;
    image: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  action: {
    text: Content | null;
    image: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  result: {
    text: Content | null;
    image: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  gallery: Array<{
    originalFilename: string | null;
    url: string | null;
    title: string | null;
    description: string | null;
    lqip: string | null;
    dimensions: SanityImageDimensions | null;
    altText: string | null;
    _rev: string;
  } | null> | null;
} | null;
// Variable: OG_IMAGE_QUERY
// Query: *[_id == $id][0]{    title,    description,    hero,    content,    _createdAt,    "image": hero.asset->{      url,      metadata {        palette      }    }  }
export type OG_IMAGE_QUERYResult = {
  title: null;
  description: null;
  hero: null;
  content: null;
  _createdAt: string;
  image: null;
} | {
  title: string | null;
  description: null;
  hero: null;
  content: null;
  _createdAt: string;
  image: null;
} | {
  title: string | null;
  description: null;
  hero: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  content: null;
  _createdAt: string;
  image: {
    url: string | null;
    metadata: {
      palette: SanityImagePalette | null;
    } | null;
  } | null;
} | {
  title: string | null;
  description: string | null;
  hero: null;
  content: null;
  _createdAt: string;
  image: null;
} | {
  title: string | null;
  description: string | null;
  hero: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  content: BlogContent | null;
  _createdAt: string;
  image: {
    url: string | null;
    metadata: {
      palette: SanityImagePalette | null;
    } | null;
  } | null;
} | null;
// Variable: SITEMAP_QUERY
// Query: *[_type in ['homePage2','contact','projectPage','blogPage'] || _type == "projectv2" && defined(slug.current) && isPublished == true || _type =="blogPost" && defined(slug.current) && now() > date ] {    "href": select(      _type == 'homePage2' => "/",      _type == 'contact' => "/contact",      _type == 'projectPage' => "/project",      _type == 'blogPage' => "/blog",      _type == "blogPost" => "/blog/" + slug.current,      _type == "projectv2" => "/project/" + slug.current,    ),    'priority':select(      _type == 'homePage2' => 0.5,      _type == 'blogPage' => 0.5,      _type == 'projectPage' => 0.5,      _type == 'contact' => 0.3,      _type == "blogPost" => 1,      _type == "projectv2" => 1,    ),    'freq':select(      _type == 'homePage2' => 'monthly',      _type == 'projectPage' => 'monthly',      _type == 'blogPage' => 'monthly',      _type == 'contact' => 'yearly',      _type == "blogPost" => 'weekly',      _type == "projectv2" => 'weekly',    ),    _updatedAt}
export type SITEMAP_QUERYResult = Array<{
  href: "/";
  priority: 0.5;
  freq: "monthly";
  _updatedAt: string;
} | {
  href: "/blog";
  priority: 0.5;
  freq: "monthly";
  _updatedAt: string;
} | {
  href: "/project";
  priority: 0.5;
  freq: "monthly";
  _updatedAt: string;
} | {
  href: string | null;
  priority: 1;
  freq: "weekly";
  _updatedAt: string;
} | {
  href: "/contact";
  priority: 0.3;
  freq: "yearly";
  _updatedAt: string;
}>;
// Variable: SETTINGS_QUERY
// Query: *[_type == "settings" ][0]
export type SETTINGS_QUERYResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  allowStudio?: Array<{
    name?: string;
    ip?: string;
    allow?: boolean;
    _key: string;
  }>;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"homePage2\"][0]{\n  ...,\n  header{\n    ...,\n      image{...,asset->}\n\n  },\n  footer{\n    ...,\n    image{\n      asset->\n    }\n  }\n}": HOME_QUERYResult;
    "*[_type == \"blogPage\"][0]": BLOG_PAGE_QUERYResult;
    "*[_type == \"blogPost\" && defined(slug.current) && isPublished == true && now() > date ][0...12]{\n  _id, title, author, slug,  content, _createdAt,publishedAt,description,\n  hero{\n    ...,\n    asset-> {\n      title,\n      url,\n      credit,\n      ...\n    }\n  },\n}": POSTS_QUERYResult;
    "*[_type == \"blogPost\" && now() > date && isPublished == true ]{_id,slug,_createdAt,_updatedAt}": BLOG_SITEMAP_QUERYResult;
    "*[_type == \"blogPost\" && now()  > date && isPublished == true ]{}": BLOG_LENGTH_QUERYResult;
    "*[_type == \"blogPost\" && slug.current == $slug][0]{\n  _id,\n  'slug':slug.current,\n  title,\n  author,\n  content, \n  publishedAt,\n  _createdAt,\n  _updatedAt,\n  description,\n  'rawContent':pt::text(content),\n  seo,\n  hero{\n    ...,\n    asset->{\n      ...\n    }\n  },\n}": POST_QUERYResult;
    "*[_type == \"contact\"][0]": CONTACT_QUERYResult;
    "*[_type == \"blogPost\" && defined(slug.current)]{ \n  \"slug\": slug.current\n}": POSTS_SLUGS_QUERYResult;
    "*[ _type == 'sanity.imageAsset' && opt.media.tags != null]{\n  originalFilename,\n  url,\n  title,\n  description,\n       'lqip':metadata.lqip,\n    'dimensions':metadata.dimensions,\n  altText,\n  _rev,\n   \"reference\" : *[\n    references(^._id)\n    && \n    _type == 'projectv2'\n  ][0]{slug, title}   \n}": GALLERY_QUERYResult;
    "*[_type == \"projectPage\"][0]": PROJECT_PAGE_QUERYResult;
    "*[_type == \"projectv2\" && isPublished == true]|order(orderRank)\n        {\n        title,\n        _id,\n        slug,\n        hero{\n          ...,\n          asset->\n        }}\n        ": PROJECTS_QUERYResult;
    "*[_type == \"projectv2\" && isPublished == true]\n        {\n        title,\n        _id,\n        slug\n        ,_createdAt,_updatedAt\n         \n          }\n        ": PROJECTS_SITEMAP_QUERYResult;
    "*[_type == \"projectv2\" && slug.current == $slug][0]\n                    {title,\n                    _id,\n                    seo,\n                    _createdAt,\n                    _updatedAt,\n                    seo,\n                     hero{\n                      ...,\n                      asset->{\n                        ...\n                      }\n                    },\n                    'rawIntro':pt::text(pitch.text),\n                    'rawContent':pt::text(pitch.text+problem.text+action.text+result.text),\n                    slug,\n                    pitch{text,\"image\":image.asset->},\n                    problem{text,\"image\":image.asset->},\n                    action{text,\"image\":image.asset->},\n                    result{text,\"image\":image.asset->},\n                  'gallery':gallery[].asset->{\n  originalFilename,\n  url,\n  title,\n  description,\n       'lqip':metadata.lqip,\n    'dimensions':metadata.dimensions,\n  altText,\n  _rev,\n}}": PROJECT_QUERYResult;
    "\n  *[_id == $id][0]{\n    title,\n    description,\n    hero,\n    content,\n    _createdAt,\n    \"image\": hero.asset->{\n      url,\n      metadata {\n        palette\n      }\n    }\n  }    \n": OG_IMAGE_QUERYResult;
    "\n*[_type in ['homePage2','contact','projectPage','blogPage'] || _type == \"projectv2\" && defined(slug.current) && isPublished == true || _type ==\"blogPost\" && defined(slug.current) && now() > date ] {\n    \"href\": select(\n      _type == 'homePage2' => \"/\",\n      _type == 'contact' => \"/contact\",\n      _type == 'projectPage' => \"/project\",\n      _type == 'blogPage' => \"/blog\",\n      _type == \"blogPost\" => \"/blog/\" + slug.current,\n      _type == \"projectv2\" => \"/project/\" + slug.current,\n    ),\n\n    'priority':select(\n      _type == 'homePage2' => 0.5,\n      _type == 'blogPage' => 0.5,\n      _type == 'projectPage' => 0.5,\n      _type == 'contact' => 0.3,\n      _type == \"blogPost\" => 1,\n      _type == \"projectv2\" => 1,\n    ),\n\n    'freq':select(\n      _type == 'homePage2' => 'monthly',\n      _type == 'projectPage' => 'monthly',\n      _type == 'blogPage' => 'monthly',\n      _type == 'contact' => 'yearly',\n      _type == \"blogPost\" => 'weekly',\n      _type == \"projectv2\" => 'weekly',\n    ),\n    _updatedAt\n}\n": SITEMAP_QUERYResult;
    "*[_type == \"settings\" ][0]": SETTINGS_QUERYResult;
  }
}
